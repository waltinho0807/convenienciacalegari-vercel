{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\walter\\\\Desktop\\\\convenienciacalegari-com-br\\\\pages\\\\products.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport ProductList from '../components/Products/ProductList';\nimport baseUrl from '../utils/baseUrl';\n\nvar Products = function Products(_ref) {\n  var products = _ref.products,\n      totalPages = _ref.totalPages;\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, __jsx(ProductList, {\n    totalPages: totalPages,\n    products: products,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }));\n};\n\n_c = Products;\n\nProducts.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var page, size, searchTerm, url, payload, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // console.log(ctx.query)\n            page = ctx.query.page ? ctx.query.page : \"1\";\n            size = 12;\n            searchTerm = ctx.query.term; // fetch data on server\n\n            url = \"\".concat(baseUrl, \"/api/products\");\n            payload = {\n              params: {\n                page: page,\n                size: size,\n                searchTerm: searchTerm\n              }\n            };\n            _context.next = 7;\n            return axios.get(url, payload);\n\n          case 7:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Products;\n\nvar _c;\n\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"sources":["C:/Users/walter/Desktop/convenienciacalegari-com-br/pages/products.js"],"names":["React","axios","ProductList","baseUrl","Products","products","totalPages","getInitialProps","ctx","page","query","size","searchTerm","term","url","payload","params","get","response","data"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA8B;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAC3C,SACI,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,UAAU,EAAEA,UAAzB;AAAqC,IAAA,QAAQ,EAAED,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAND;;KAAMD,Q;;AAQNA,QAAQ,CAACG,eAAT;AAAA,uEAA2B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvB;AACMC,YAAAA,IAFiB,GAEVD,GAAG,CAACE,KAAJ,CAAUD,IAAV,GAAiBD,GAAG,CAACE,KAAJ,CAAUD,IAA3B,GAAkC,GAFxB;AAGjBE,YAAAA,IAHiB,GAGV,EAHU;AAIjBC,YAAAA,UAJiB,GAIJJ,GAAG,CAACE,KAAJ,CAAUG,IAJN,EAKvB;;AACMC,YAAAA,GANiB,aAMRX,OANQ;AAOjBY,YAAAA,OAPiB,GAOP;AAAEC,cAAAA,MAAM,EAAE;AAACP,gBAAAA,IAAI,EAAJA,IAAD;AAAOE,gBAAAA,IAAI,EAAJA,IAAP;AAAaC,gBAAAA,UAAU,EAAVA;AAAb;AAAV,aAPO;AAAA;AAAA,mBAQAX,KAAK,CAACgB,GAAN,CAAUH,GAAV,EAAeC,OAAf,CARA;;AAAA;AAQjBG,YAAAA,QARiB;AAAA,6CAUhBA,QAAQ,CAACC,IAVO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAcA,eAAef,QAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport ProductList from '../components/Products/ProductList';\nimport baseUrl from '../utils/baseUrl';\n\nconst Products = ({ products, totalPages }) => {\n    return(\n        <React.Fragment>\n            <ProductList totalPages={totalPages} products={products} />\n        </React.Fragment>\n    );\n}\n\nProducts.getInitialProps = async (ctx) => {\n    // console.log(ctx.query)\n    const page = ctx.query.page ? ctx.query.page : \"1\";\n    const size = 12;\n    const searchTerm = ctx.query.term\n    // fetch data on server\n    const url = `${baseUrl}/api/products`;\n    const payload = { params: {page, size, searchTerm}}\n    const response = await axios.get(url, payload);\n    // return response data as an object\n    return response.data\n    // note: this object will be merge with existing props\n}\n\nexport default Products;\n"]},"metadata":{},"sourceType":"module"}