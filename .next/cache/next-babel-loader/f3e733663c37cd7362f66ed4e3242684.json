{"ast":null,"code":"import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb'; // Connect db\n\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      handlePutRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n  }\n});\n\nconst handleGetRequest = async (req, res) => {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No autorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token\");\n  }\n};\n\nconst handlePutRequest = async (req, res) => {\n  const {\n    _id,\n    role\n  } = req.body;\n  await User.findOneAndUpdate({\n    _id\n  }, {\n    role\n  });\n  res.status(203).send('User Updated');\n};","map":null,"metadata":{},"sourceType":"module"}