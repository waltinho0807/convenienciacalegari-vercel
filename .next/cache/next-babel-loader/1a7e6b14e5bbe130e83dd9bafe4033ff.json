{"ast":null,"code":"import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb'; // Connect db\n\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      handlePutRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n  }\n});\n\nconst handleGetRequest = async (req, res) => {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No autorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: userId\n    });\n\n    if (user) {\n      res.status(200).json(user);\n    } else {\n      res.status(404).send(\"User not found\");\n    }\n  } catch (error) {\n    res.status(403).send(\"Invalid token\");\n  }\n};\n\nconst handlePutRequest = async (req, res) => {\n  const {\n    _id,\n    role\n  } = req.body;\n  await User.findOneAndUpdate({\n    _id\n  }, {\n    role\n  });\n  res.status(203).send('User Updated');\n};","map":{"version":3,"sources":["C:/Users/walter/Desktop/shoponix-mern-next-ecommerce-store/shoponix/pages/api/account.js"],"names":["User","jwt","connectDb","req","res","method","handleGetRequest","handlePutRequest","status","send","headers","userId","verify","authorization","process","env","JWT_SECRET","user","findOne","_id","json","error","role","body","findOneAndUpdate"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB,C,CAEA;;AACAA,SAAS;AAET,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,KAAL;AACI,YAAMC,gBAAgB,CAACH,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACJ,SAAK,KAAL;AACIG,MAAAA,gBAAgB,CAACJ,GAAD,EAAMC,GAAN,CAAhB;AACA;;AACJ;AACIA,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASN,GAAG,CAACE,MAAO,cAA1C;AARR;AAUH,CAXD;;AAaA,MAAMC,gBAAgB,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACzC,MAAG,EAAE,mBAAmBD,GAAG,CAACO,OAAzB,CAAH,EAAqC;AACjC,WAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB,CAAP;AACH;;AAED,MAAI;AACA,UAAM;AAACE,MAAAA;AAAD,QAAWV,GAAG,CAACW,MAAJ,CAAWT,GAAG,CAACO,OAAJ,CAAYG,aAAvB,EAAsCC,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAjB;AACA,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAAEC,MAAAA,GAAG,EAAER;AAAP,KAAb,CAAnB;;AACA,QAAGM,IAAH,EAAQ;AACJb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBH,IAArB;AACH,KAFD,MAEO;AACHb,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACH;AACJ,GARD,CAQE,OAAOY,KAAP,EAAc;AACZjB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACH;AACJ,CAhBD;;AAkBA,MAAMF,gBAAgB,GAAG,OAAOJ,GAAP,EAAYC,GAAZ,KAAoB;AACzC,QAAM;AAAEe,IAAAA,GAAF;AAAOG,IAAAA;AAAP,MAAgBnB,GAAG,CAACoB,IAA1B;AACA,QAAMvB,IAAI,CAACwB,gBAAL,CACF;AAACL,IAAAA;AAAD,GADE,EAEF;AAACG,IAAAA;AAAD,GAFE,CAAN;AAIAlB,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB;AACH,CAPD","sourcesContent":["import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\n\n// Connect db\nconnectDb();\n\nexport default async (req, res) => {\n    switch(req.method){\n        case \"GET\":\n            await handleGetRequest(req, res);\n            break;\n        case \"PUT\":\n            handlePutRequest(req, res);\n            break;\n        default:\n            res.status(405).send(`Method ${req.method} not allowed`);\n    }\n}\n\nconst handleGetRequest = async (req, res) => {\n    if(!(\"authorization\" in req.headers)){\n        return res.status(401).send(\"No autorization token\");\n    }\n\n    try {\n        const {userId} = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n        const user = await User.findOne({ _id: userId });\n        if(user){\n            res.status(200).json(user);\n        } else {\n            res.status(404).send(\"User not found\");\n        }\n    } catch (error) {\n        res.status(403).send(\"Invalid token\");\n    }\n}\n\nconst handlePutRequest = async (req, res) => {\n    const { _id, role } = req.body;\n    await User.findOneAndUpdate(\n        {_id},\n        {role}\n    )\n    res.status(203).send('User Updated');\n}"]},"metadata":{},"sourceType":"module"}