{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nimport connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport Cart from '../../models/Cart';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // check email, name, password format\n    if (!isLength(name, {\n      min: 3,\n      max: 15\n    })) {\n      return res.status(422).send(\"Name must be 3-10 characters long\");\n    } else if (!isLength(password, {\n      min: 5,\n      max: 15\n    })) {\n      return res.status(422).send(\"Password must be 5-15 characters long\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid\");\n    }\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exist with that ${email}`);\n    }\n\n    const passwordHash = await bcrypt.hash(password, 10);\n    const newUser = await new User({\n      name,\n      email,\n      password: passwordHash\n    }).save(); // console.log({newUser});\n    // create a cart for the new user\n\n    await new Cart({\n      user: newUser._id\n    }).save();\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    });\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in signup. Please try again.\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}