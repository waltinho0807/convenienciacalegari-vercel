{"ast":null,"code":"import mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nconst {\n  ObjectId\n} = mongoose.Types;\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nconst handleGetRequest = async (req, res) => {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Not authenticated\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    // console.error(error);\n    res.status(403).send(\"Please login\");\n  }\n};\n\nconst handlePutRequest = async (req, res) => {\n  const {\n    quantity,\n    productId\n  } = req.body;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Not authenticated\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    });\n    const productExists = cart.products.some(doc => ObjectId(productId).equals(doc.product));\n\n    if (productExists) {\n      await Cart.findOneAndUpdate({\n        _id: cart._id,\n        \"products.product\": productId\n      }, {\n        $inc: {\n          \"prodcts.$.quantity\": quantity\n        }\n      });\n    } else {\n      const newProduct = {\n        quantity,\n        product: productId\n      };\n      await Cart.findByIdAndUpdate({\n        _id: cart._id\n      }, {\n        $addToSet: {\n          products: newProduct\n        }\n      });\n    }\n\n    res.status(200).send(\"Cart updated\");\n  } catch (error) {\n    // console.error(error);\n    res.status(403).send(\"Please login\");\n  }\n};\n\nconst handleDeleteRequest = async (req, res) => {\n  const {\n    productId\n  } = req.query;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"Not authenticated\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOneAndUpdate({\n      user: userId\n    }, {\n      $pull: {\n        products: {\n          product: productId\n        }\n      }\n    }, {\n      new: true\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login\");\n  }\n};","map":null,"metadata":{},"sourceType":"module"}