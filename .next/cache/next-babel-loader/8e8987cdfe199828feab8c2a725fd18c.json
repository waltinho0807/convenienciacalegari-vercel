{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    const user = await User.findOne({\n      email\n    }).select('+password');\n\n    if (!user) {\n      return res.status(404).send(\"User does not exists\");\n    }\n\n    const passwordsMatch = await bcrypt.compare(password, user.password);\n\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: '7d'\n      });\n      res.status(200).json(token);\n    } else {\n      res.status(401).send(\"Password not match\");\n    }\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user\");\n  }\n});","map":{"version":3,"sources":["C:/Users/walter/Desktop/shoponix-mern-next-ecommerce-store/shoponix/pages/api/login.js"],"names":["bcrypt","jwt","connectDb","User","req","res","email","password","body","user","findOne","select","status","send","passwordsMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AACA,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,EAAwBK,MAAxB,CAA+B,WAA/B,CAAnB;;AACA,QAAG,CAACF,IAAJ,EAAU;AACN,aAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAAP;AACH;;AAED,UAAMC,cAAc,GAAG,MAAMd,MAAM,CAACe,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAA7B;;AACA,QAAIO,cAAJ,EAAmB;AACf,YAAME,KAAK,GAAGf,GAAG,CAACgB,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAET,IAAI,CAACU;AAAf,OAAT,EAA8BC,OAAO,CAACC,GAAR,CAAYC,UAA1C,EAAsD;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAtD,CAAd;AACAlB,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBR,KAArB;AACH,KAHD,MAGO;AACHX,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oBAArB;AACH;AACJ,GAbD,CAaE,OAAOY,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACApB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACH;AACJ,CAnBD","sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\n\nconnectDb();\n\nexport default async (req, res) => {\n    const { email, password } = req.body;\n    try {\n        const user = await User.findOne({ email }).select('+password');\n        if(!user) {\n            return res.status(404).send(\"User does not exists\");\n        }\n\n        const passwordsMatch = await bcrypt.compare(password, user.password);\n        if (passwordsMatch){\n            const token = jwt.sign({ userId: user._id}, process.env.JWT_SECRET, {expiresIn: '7d'});\n            res.status(200).json(token);\n        } else {\n            res.status(401).send(\"Password not match\");\n        }\n    } catch (error) {\n        console.error(error);\n        res.status(500).send(\"Error logging in user\");\n    }\n}"]},"metadata":{},"sourceType":"module"}