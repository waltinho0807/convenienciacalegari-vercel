{"ast":null,"code":"import Product from '../../models/Product';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    page,\n    size,\n    searchTerm\n  } = req.query; // console.log(searchTerm)\n  // string to number\n\n  const pageNum = Number(page);\n  const pageSize = Number(size);\n  let products = [];\n  let totalDocts;\n\n  if (searchTerm) {\n    totalDocts = await Product.countDocuments({\n      $or: [{\n        productType: {\n          $regex: `^${searchTerm}`\n        }\n      }, {\n        name: new RegExp(searchTerm, 'i')\n      }]\n    });\n  } else {\n    totalDocts = await Product.countDocuments();\n  }\n\n  const totalPages = Math.ceil(totalDocts / pageSize);\n\n  if (searchTerm) {\n    if (pageNum === 1) {\n      products = await Product.find({\n        $or: [{\n          productType: {\n            $regex: `^${searchTerm}`\n          }\n        }, {\n          name: new RegExp(searchTerm, 'i')\n        }]\n      }).collation({\n        locale: 'en',\n        strength: 1\n      }).sort({\n        viewCount: 'desc'\n      }).limit(pageSize);\n    } else {\n      const skips = pageSize * (pageNum - 1);\n      products = await Product.find({\n        $or: [{\n          productType: {\n            $regex: `^${searchTerm}`\n          }\n        }, {\n          name: new RegExp(searchTerm, 'i')\n        }]\n      }).collation({\n        locale: 'en',\n        strength: 1\n      }).sort({\n        viewCount: 'desc'\n      }).skip(skips).limit(pageSize);\n    }\n  } else {\n    if (pageNum === 1) {\n      products = await Product.find().sort({\n        name: 'desc'\n      }).limit(pageSize);\n    } else {\n      const skips = pageSize * (pageNum - 1);\n      products = await Product.find().sort({\n        name: 'desc'\n      }).skip(skips).limit(pageSize);\n    }\n  } // const products = await Product.find();\n\n\n  res.status(200).json({\n    products,\n    totalPages\n  });\n});","map":null,"metadata":{},"sourceType":"module"}