{"ast":null,"code":"import shortid from 'shortid';\nimport Product from '../../models/Product';\nimport Cart from '../../models/Cart';\nimport Order from '../../models/Order';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nconst handleGetRequest = async (req, res) => {\n  const {\n    id\n  } = req.query;\n  const product = await Product.findOneAndUpdate({\n    _id: id\n  }, {\n    $inc: {\n      viewCount: 1\n    }\n  });\n  const {\n    productType\n  } = product;\n  const related = await Product.find({\n    productType: productType\n  }).sort({\n    viewCount: 'desc'\n  }).limit(4);\n  res.status(200).json({\n    product,\n    related\n  });\n};\n\nconst handlePostRequest = async (req, res) => {\n  const {\n    name,\n    price,\n    description,\n    productType,\n    mediaUrl\n  } = req.body;\n  const sku = shortid.generate();\n\n  try {\n    if (!name || !price || !description || !sku || !mediaUrl) {\n      return res.status(422).send(\"Product missing one or more fields\");\n    }\n\n    const product = await new Product({\n      name,\n      sku,\n      price,\n      description,\n      productType,\n      mediaUrl\n    }).save();\n    res.status(200).json(product);\n  } catch (error) {\n    // console.error(error)\n    res.status(500).send(\"Error creating product on the Server\");\n  }\n};\n\nconst handlePutRequest = async (req, res) => {\n  // console.log(req.body)\n  const {\n    _id,\n    name,\n    price,\n    description,\n    productType,\n    mediaUrl\n  } = req.body;\n  await Product.updateOne({\n    _id\n  }, {\n    $set: {\n      name,\n      price,\n      description,\n      productType,\n      mediaUrl\n    },\n    $currentDate: {\n      updatedAt: true\n    }\n  }); // console.log(up)\n\n  res.status(203).send('Product Updated');\n};\n\nconst handleDeleteRequest = async (req, res) => {\n  const {\n    _id\n  } = req.query;\n\n  try {\n    await Product.findByIdAndDelete({\n      _id\n    });\n    await Cart.updateMany({\n      \"products.product\": _id\n    }, {\n      $pull: {\n        products: {\n          product: _id\n        }\n      }\n    });\n    await Order.updateMany({\n      \"products.product\": _id\n    }, {\n      $pull: {\n        products: {\n          product: _id\n        }\n      }\n    });\n    res.status(204).json({});\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Error deleting products');\n  }\n};","map":null,"metadata":{},"sourceType":"module"}