{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { Label, Checkbox, Popup } from 'semantic-ui-react';\nimport formatDate from '../../utils/formatDate';\nimport baseUrl from '../../utils/baseUrl';\n\nvar OrderStatus = function OrderStatus(_ref) {\n  var order = _ref.order;\n\n  var _React$useState = React.useState(order.status === 'delivered'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      delivered = _React$useState2[0],\n      setDelivered = _React$useState2[1];\n\n  var isFirstRun = useRef(true);\n  useEffect(function () {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n\n    updateStatus();\n  }, [delivered]);\n\n  var updateStatus = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var url, payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = \"\".concat(baseUrl, \"/api/orders\");\n              payload = {\n                _id: order._id,\n                status: delivered ? \"delivered\" : \"pending\"\n              };\n              _context.next = 4;\n              return axios.put(url, payload);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateStatus() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleChangeStatus = function handleChangeStatus() {\n    setDelivered(function (prevState) {\n      return !prevState;\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Label, {\n    color: \"blue\",\n    content: formatDate(order.createdAt)\n  }), __jsx(Popup, {\n    trigger: __jsx(Checkbox, {\n      toggle: true,\n      onChange: handleChangeStatus,\n      label: delivered ? \"Delivered\" : \"Pending\",\n      checked: delivered,\n      fitted: true\n    }),\n    header: \"Delivery Status\",\n    content: delivered ? \"Delivered\" : \"Pending\",\n    position: \"top center\",\n    on: ['hover']\n  }));\n};\n\nexport default OrderStatus;","map":null,"metadata":{},"sourceType":"module"}