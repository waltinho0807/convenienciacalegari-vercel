{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nimport connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport Cart from '../../models/Cart';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // check email, name, password format\n    if (!isLength(name, {\n      min: 3,\n      max: 15\n    })) {\n      return res.status(422).send(\"Name must be 3-10 characters long\");\n    } else if (!isLength(password, {\n      min: 5,\n      max: 15\n    })) {\n      return res.status(422).send(\"Password must be 5-15 characters long\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid\");\n    }\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exist with that ${email}`);\n    }\n\n    const passwordHash = await bcrypt.hash(password, 10);\n    const newUser = await new User({\n      name,\n      email,\n      password: passwordHash\n    }).save(); // console.log({newUser});\n    // create a cart for the new user\n\n    await new Cart({\n      user: newUser._id\n    }).save();\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    });\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in signup. Please try again.\");\n  }\n});","map":{"version":3,"sources":["C:/Users/walter/Desktop/shoponix-mern-next-ecommerce-store/shoponix/pages/api/signup.js"],"names":["bcrypt","jwt","isEmail","isLength","connectDb","User","Cart","req","res","name","email","password","body","min","max","status","send","user","findOne","passwordHash","hash","newUser","save","_id","token","sign","userId","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEAF,SAAS;AAET,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC;;AACA,MAAI;AACA;AACA,QAAI,CAACT,QAAQ,CAACM,IAAD,EAAO;AAACI,MAAAA,GAAG,EAAE,CAAN;AAASC,MAAAA,GAAG,EAAE;AAAd,KAAP,CAAb,EAAwC;AACpC,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mCAArB,CAAP;AACH,KAFD,MAEO,IAAI,CAACb,QAAQ,CAACQ,QAAD,EAAW;AAACE,MAAAA,GAAG,EAAE,CAAN;AAASC,MAAAA,GAAG,EAAE;AAAd,KAAX,CAAb,EAA2C;AAC9C,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AACH,KAFM,MAEA,IAAI,CAACd,OAAO,CAACQ,KAAD,CAAZ,EAAoB;AACvB,aAAOF,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAAP;AACH;;AAED,UAAMC,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAL,CAAa;AAAER,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAIO,IAAJ,EAAS;AACL,aAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,gCAA+BN,KAAM,EAA3D,CAAP;AACH;;AAED,UAAMS,YAAY,GAAG,MAAMnB,MAAM,CAACoB,IAAP,CAAYT,QAAZ,EAAsB,EAAtB,CAA3B;AACA,UAAMU,OAAO,GAAG,MAAM,IAAIhB,IAAJ,CAAS;AAC3BI,MAAAA,IAD2B;AAE3BC,MAAAA,KAF2B;AAG3BC,MAAAA,QAAQ,EAAEQ;AAHiB,KAAT,EAInBG,IAJmB,EAAtB,CAhBA,CAqBA;AACA;;AACA,UAAM,IAAIhB,IAAJ,CAAS;AAAEW,MAAAA,IAAI,EAAEI,OAAO,CAACE;AAAhB,KAAT,EAAgCD,IAAhC,EAAN;AAEA,UAAME,KAAK,GAAGvB,GAAG,CAACwB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEL,OAAO,CAACE;AAAlB,KAAT,EAAkCI,OAAO,CAACC,GAAR,CAAYC,UAA9C,EAA0D;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAA1D,CAAd;AACAtB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBP,KAArB;AACH,GA3BD,CA2BE,OAAOQ,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAxB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oCAArB;AACH;AACJ,CAjCD","sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nimport connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport Cart from '../../models/Cart';\n\nconnectDb();\n\nexport default async (req, res) => {\n    const { name, email, password } = req.body;\n    try {\n        // check email, name, password format\n        if (!isLength(name, {min: 3, max: 15})) {\n            return res.status(422).send(\"Name must be 3-10 characters long\");\n        } else if (!isLength(password, {min: 5, max: 15})){\n            return res.status(422).send(\"Password must be 5-15 characters long\");\n        } else if (!isEmail(email)){\n            return res.status(422).send(\"Email must be valid\");\n        }\n\n        const user = await User.findOne({ email });\n        if (user){\n            return res.status(422).send(`User already exist with that ${email}`);\n        }\n\n        const passwordHash = await bcrypt.hash(password, 10);\n        const newUser = await new User({\n            name,\n            email,\n            password: passwordHash\n        }).save();\n        // console.log({newUser});\n        // create a cart for the new user\n        await new Cart({ user: newUser._id }).save();\n\n        const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, {expiresIn: '7d'});\n        res.status(201).json(token);\n    } catch (error) {\n        console.error(error);\n        res.status(500).send(\"Error in signup. Please try again.\");\n    }\n}"]},"metadata":{},"sourceType":"module"}