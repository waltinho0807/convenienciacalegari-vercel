{"ast":null,"code":"import Product from '../../models/Product';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    page,\n    size,\n    searchTerm\n  } = req.query; // console.log(searchTerm)\n  // string to number\n\n  const pageNum = Number(page);\n  const pageSize = Number(size);\n  let products = [];\n  let totalDocts;\n\n  if (searchTerm) {\n    totalDocts = await Product.countDocuments({\n      $or: [{\n        productType: {\n          $regex: `^${searchTerm}`\n        }\n      }, {\n        name: new RegExp(searchTerm, 'i')\n      }]\n    });\n  } else {\n    totalDocts = await Product.countDocuments();\n  }\n\n  const totalPages = Math.ceil(totalDocts / pageSize);\n\n  if (searchTerm) {\n    if (pageNum === 1) {\n      products = await Product.find({\n        $or: [{\n          productType: {\n            $regex: `^${searchTerm}`\n          }\n        }, {\n          name: new RegExp(searchTerm, 'i')\n        }]\n      }).collation({\n        locale: 'en',\n        strength: 1\n      }).sort({\n        viewCount: 'desc'\n      }).limit(pageSize);\n    } else {\n      const skips = pageSize * (pageNum - 1);\n      products = await Product.find({\n        $or: [{\n          productType: {\n            $regex: `^${searchTerm}`\n          }\n        }, {\n          name: new RegExp(searchTerm, 'i')\n        }]\n      }).collation({\n        locale: 'en',\n        strength: 1\n      }).sort({\n        viewCount: 'desc'\n      }).skip(skips).limit(pageSize);\n    }\n  } else {\n    if (pageNum === 1) {\n      products = await Product.find().sort({\n        name: 'desc'\n      }).limit(pageSize);\n    } else {\n      const skips = pageSize * (pageNum - 1);\n      products = await Product.find().sort({\n        name: 'desc'\n      }).skip(skips).limit(pageSize);\n    }\n  } // const products = await Product.find();\n\n\n  res.status(200).json({\n    products,\n    totalPages\n  });\n});","map":{"version":3,"sources":["C:/Users/walter/Desktop/shoponix-mern-next-ecommerce-store/shoponix/pages/api/products.js"],"names":["Product","connectDb","req","res","page","size","searchTerm","query","pageNum","Number","pageSize","products","totalDocts","countDocuments","$or","productType","$regex","name","RegExp","totalPages","Math","ceil","find","collation","locale","strength","sort","viewCount","limit","skips","skip","status","json"],"mappings":"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","sourcesContent":["import Product from '../../models/Product';\nimport connectDb from '../../utils/connectDb';\n\nconnectDb()\n\nexport default async (req, res) => {\n    const {page, size, searchTerm} = req.query;\n    // console.log(searchTerm)\n    // string to number\n    const pageNum = Number(page);\n    const pageSize = Number(size);\n    let products = [];\n    let totalDocts;\n    if(searchTerm){\n        totalDocts = await Product.countDocuments(\n            { \n                $or: [ \n                    { productType: { $regex: `^${searchTerm}`  } }, \n                    { name: new RegExp(searchTerm, 'i') } \n                ] \n            }\n        );\n    } else {\n        totalDocts = await Product.countDocuments();\n    }\n    const totalPages = Math.ceil(totalDocts / pageSize);\n    if (searchTerm){\n        if(pageNum === 1){\n            products = await Product.find(\n                { \n                    $or: [ \n                        { productType: { $regex: `^${searchTerm}`  } }, \n                        { name: new RegExp(searchTerm, 'i') } \n                    ] \n                }\n            )\n            .collation( { locale: 'en', strength: 1 } )\n            .sort({viewCount: 'desc'}).limit(pageSize);\n        } else {\n            const skips = pageSize * (pageNum - 1)\n            products = await Product.find(\n                { \n                    $or: [ \n                        { productType: { $regex: `^${searchTerm}`  } }, \n                        { name: new RegExp(searchTerm, 'i') } \n                    ] \n                }\n            )\n            .collation( { locale: 'en', strength: 1 } )\n            .sort({viewCount: 'desc'}).skip(skips).limit(pageSize);\n        }\n    } else {\n        if(pageNum === 1){\n            products = await Product.find().sort({name: 'desc'}).limit(pageSize);\n        } else {\n            const skips = pageSize * (pageNum - 1)\n            products = await Product.find().sort({name: 'desc'}).skip(skips).limit(pageSize);\n        }\n    }\n\n    // const products = await Product.find();\n    res.status(200).json({products, totalPages})\n}"]},"metadata":{},"sourceType":"module"}